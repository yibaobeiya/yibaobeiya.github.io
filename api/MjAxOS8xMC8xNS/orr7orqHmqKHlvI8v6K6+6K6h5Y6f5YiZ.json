{"title":"五大设计原则（SOLID）","date":"2019-10-15T07:44:05.283Z","link":"2019/10/15/设计模式/设计原则","tags":["设计模式"],"categories":["JS 设计模式"],"updated":"2019-10-15T09:55:20.696Z","content":"<h2 id=\"S：单一职责原则-（体现较多）\">S：单一职责原则 （体现较多）<a href=\"2019/10/15/设计模式/设计原则#S：单一职责原则-（体现较多）\"></a></h2><ul>\n<li>一个程序只做好一件事。</li>\n<li>如果功能过于复杂就拆分开，每个部分保持独立。</li>\n</ul>\n<h2 id=\"O：开放封闭原则-（体现较多）\">O：开放封闭原则 （体现较多）<a href=\"2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\"></a></h2><ul>\n<li>对扩展开放，对修改封闭。</li>\n<li>增加需求时，扩展新代码而不是修改已有代码。</li>\n<li>也是软件设计的终极目标。</li>\n</ul>\n<p>用promise来说明SO</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.单一职责原则：每个then中的逻辑只做好一件事</span></span><br><span class=\"line\"><span class=\"comment\"># 2.开放封闭原则：如果新增需求，扩展then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loadImg(src)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Promise(<span class=\"keyword\">function</span>(resolve,reject)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> img = document.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            resolve(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.onerror= <span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">            reject(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = src</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadImg(<span class=\"string\">'https://www.gravatar.com/avatar/06818ca4361a28447cffdd2daaed2799?s=160'</span>).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(img)&#123;</span><br><span class=\"line\">    console.log(img.width)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> img</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(img)&#123;</span><br><span class=\"line\">    console.log(img.height)</span><br><span class=\"line\">&#125;).catch(<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    //统一捕获异常</span><br><span class=\"line\">    console.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"L：李氏置换原则\">L：李氏置换原则<a href=\"2019/10/15/设计模式/设计原则#L：李氏置换原则\"></a></h2><ul>\n<li>子类能覆盖父类，父类能出现的地方子类就能出现。</li>\n<li>js中使用较少（弱类型&amp;继承使用较少）。</li>\n</ul>\n<h2 id=\"I：接口独立原则\">I：接口独立原则<a href=\"2019/10/15/设计模式/设计原则#I：接口独立原则\"></a></h2><ul>\n<li>保持接口的单一独立，避免出现“胖接口”。</li>\n<li>JS中没有接口（typescript例外），使用较少。</li>\n<li>类似于单一职责原则，这里更关注接口</li>\n</ul>\n<h2 id=\"D：依赖倒置原则\">D：依赖倒置原则<a href=\"2019/10/15/设计模式/设计原则#D：依赖倒置原则\"></a></h2><ul>\n<li>面向接口编程，依赖于抽象而不依赖于具体。</li>\n<li>使用方法只关注接口而不关注具体类的实现。</li>\n<li>JS中使用较少（没有接口&amp;弱类型）。</li>\n</ul>\n","prev":{"title":"面试题示例","link":"2019/10/15/设计模式/面试题"},"next":{"title":"JS - 面向对象","link":"2019/10/14/js-面向对象"},"plink":"yibaobeiya.github.io/2019/10/15/设计模式/设计原则/","toc":[{"title":"S：单一职责原则 （体现较多）","id":"S：单一职责原则-（体现较多）","index":"1"},{"title":"O：开放封闭原则 （体现较多）","id":"O：开放封闭原则-（体现较多）","index":"2"},{"title":"L：李氏置换原则","id":"L：李氏置换原则","index":"3"},{"title":"I：接口独立原则","id":"I：接口独立原则","index":"4"},{"title":"D：依赖倒置原则","id":"D：依赖倒置原则","index":"5"}]}