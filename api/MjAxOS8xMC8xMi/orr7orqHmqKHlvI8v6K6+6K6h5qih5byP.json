{"title":"JS 设计模式","date":"2019-10-12T02:57:12.535Z","link":"2019/10/12/设计模式/设计模式","tags":["JS","设计模式"],"categories":["JS 设计模式"],"updated":"2019-10-17T10:14:00.075Z","content":"<h2 id=\"概述\">概述<a href=\"2019/10/12/设计模式/设计模式#概述\"></a></h2><p><strong>js的设计模式总共有23种，总体来说设计模式分为三大类：</strong></p>\n<p>1、创建型模式 共五种：工厂方法模式、抽象工厂模式、建造者模式、单例模式、原型模式。<br>2、结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>3、行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h2 id=\"常用的设计模式\">常用的设计模式<a href=\"2019/10/12/设计模式/设计模式#常用的设计模式\"></a></h2><p>工厂方法模式、单例模式、适配器模式、装饰器模式、代理模式</p>\n<h3 id=\"工厂方法模式\">工厂方法模式<a href=\"2019/10/12/设计模式/设计模式#工厂方法模式\"></a></h3><h4 id=\"介绍\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍\"></a></h4><ul>\n<li>将 new 操作单独封装。</li>\n<li>遇到 new 时，就要考虑是否该使用工厂模式。</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例\">示例<a href=\"2019/10/12/设计模式/设计模式#示例\"></a></h4><ul>\n<li>你去购买汉堡，直接点餐、取餐，不会自己亲手做。</li>\n<li>商店要封装做汉堡的工作，做好直接给顾客。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Product &#123;</span><br><span class=\"line\">    constructor(name)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">init</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">buy</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># //工厂</span></span><br><span class=\"line\">class Store &#123;</span><br><span class=\"line\">    create(name)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Product(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Store();  </span><br><span class=\"line\">const product = store.create(<span class=\"string\">'干脆面'</span>)</span><br><span class=\"line\">product.buy()</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景\">场景<a href=\"2019/10/12/设计模式/设计模式#场景\"></a></h4><ul>\n<li>jQuery 实例<br><a href=\"/2019/10/14/js-面向对象#实例\">$(‘div’)</a></li>\n</ul>\n<ul>\n<li>React.createElement</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vnode(tag, attrs, children) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 省略内部代码...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">React.createElement = <span class=\"keyword\">function</span>(tag, attrs, children)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Vnode(tag, attrs, children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">React.createElement(<span class=\"string\">'div'</span>,null,</span><br><span class=\"line\">    React.createElement(<span class=\"string\">'img'</span>,&#123;src:<span class=\"string\">'header.png'</span>&#125;)</span><br><span class=\"line\">    React.createElement(<span class=\"string\">'h3'</span>,null,<span class=\"string\">'h3标题就是我'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>vue 异步组件</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'component-name'</span>,<span class=\"keyword\">function</span>(resolve, reject)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">            template : <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"单例模式\">单例模式<a href=\"2019/10/12/设计模式/设计模式#单例模式\"></a></h3><h4 id=\"介绍-1\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-1\"></a></h4><ul>\n<li>系统中被唯一使用</li>\n<li>一个类只能初始化一个实例</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#S：单一职责原则-（体现较多）\">符合单一职责原则</a></li>\n</ul>\n<h4 id=\"示例-1\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-1\"></a></h4><ul>\n<li>登陆框</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoginForm &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span>()&#123;</span><br><span class=\"line\">        this.state = <span class=\"string\">'hide'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(this.state===<span class=\"string\">'show'</span>)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'登陆框已经显示'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.state = <span class=\"string\">'show'</span>;</span><br><span class=\"line\">        console.log(<span class=\"string\">'show Success'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">hide</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(this.state===<span class=\"string\">'hide'</span>)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'登陆框已经隐藏'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.state = <span class=\"string\">'hide'</span>;</span><br><span class=\"line\">        console.log(<span class=\"string\">'hide Success'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">LoginForm.getInstance = (<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> instance;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> instance?instance:instance = new LoginForm()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> login1 = LoginForm.getInstance()</span><br><span class=\"line\"><span class=\"built_in\">let</span> login2 = LoginForm.getInstance()</span><br><span class=\"line\">login1.show()</span><br><span class=\"line\">login2.hide()</span><br><span class=\"line\">login2.hide()</span><br><span class=\"line\">console.log(login1===login2) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-1\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-1\"></a></h4><ul>\n<li>vuex和redux中的store</li>\n</ul>\n<h3 id=\"适配器模式\">适配器模式<a href=\"2019/10/12/设计模式/设计模式#适配器模式\"></a></h3><h4 id=\"介绍-2\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-2\"></a></h4><ul>\n<li>旧接口格式和使用者不兼容</li>\n<li>中间加一个适配转换接口</li>\n<li>将旧接口和使用者进行分离</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-2\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-2\"></a></h4><ul>\n<li>插头的适配<br>德国的插头在中国没办法使用，故需要将德国的插头转换（适配）为中国可使用的。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 德国的插头</span></span><br><span class=\"line\">class GermanyPlug &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPlug</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">'德国专用插头'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 中国的插头</span></span><br><span class=\"line\">class chinaPlug &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span> ()&#123;</span><br><span class=\"line\">        this.plug = new GermanyPlug()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPlug</span></span>()&#123;</span><br><span class=\"line\">        const info = this.plug.getPlug();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;info&#125;</span> - 转换为 - 中国专用插头`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const plug = new chinaPlug();</span><br><span class=\"line\">console.log(plug.getPlug())</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-2\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-2\"></a></h4><ul>\n<li>封装旧接口</li>\n<li>vue中的computed</li>\n</ul>\n<h3 id=\"装饰器模式\">装饰器模式<a href=\"2019/10/12/设计模式/设计模式#装饰器模式\"></a></h3><ol>\n<li>npm install babel-plugin-transform-decorators-legacy –save-dev</li>\n<li>.babel文件中添加，”plugins”: [“transform-decorators-legacy”]</li>\n</ol>\n<h4 id=\"介绍-3\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-3\"></a></h4><ul>\n<li>为对象添加新功能</li>\n<li>不改变其原有的结构和功能</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-3\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-3\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">draw</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'画一个圆形'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Decorator &#123;</span><br><span class=\"line\">    constructor(circle) &#123;</span><br><span class=\"line\">        this.circle = circle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">draw</span></span>() &#123;</span><br><span class=\"line\">        this.circle.draw();</span><br><span class=\"line\">        this.setBorderRed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setBorderRed</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'设置红色边框'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> circle = new Circle();</span><br><span class=\"line\">circle.draw()</span><br><span class=\"line\"><span class=\"built_in\">let</span> decorator = new Decorator(circle)</span><br><span class=\"line\">decorator.draw()</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-3\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-3\"></a></h4><ul>\n<li>装饰类</li>\n</ul>\n<p>1、简单的demo1</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> testDec(target)&#123;</span><br><span class=\"line\">    target.isDec = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testDec</span><br><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Demo.isDec) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>2、可传参demo2</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> testDec(isDec)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(target)&#123;</span><br><span class=\"line\">        target.isDec = isDec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testDec(<span class=\"literal\">true</span>)</span><br><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Demo.isDec) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>3、mixin demo3</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mixins(...list)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(target)&#123;</span><br><span class=\"line\">        Objext.assign(target.prototype,...list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Foo = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">foo</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'Foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\">class Demo &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Demo.foo() //<span class=\"string\">'foo'</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>装饰方法</li>\n</ul>\n<p>1、设置方法为只读</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">readonly</span>(target,name,descriptor)&#123;</span><br><span class=\"line\">    descriptor.writable = <span class=\"literal\">false</span>; //设置不可写</span><br><span class=\"line\">    <span class=\"built_in\">return</span> descriptor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">readonly</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br><span class=\"line\"><span class=\"comment\"># //该行会报错</span></span><br><span class=\"line\">person.name = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>2、打印日志</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">log</span>(target,name,descriptor)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> oldValue = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(`calling <span class=\"variable\">$&#123;name&#125;</span> width`,arguments);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> oldValue.apply(this,arguments)  //执行add方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Math &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">log</span></span><br><span class=\"line\">    add(a,b) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const math = new Math();</span><br><span class=\"line\">console.log(math.add(2,4)) //calling add width &#123;...arguments&#125;  6</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>引用第三方装饰器库<br>npm install core-decorators –save</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置name为只读</span></span><br><span class=\"line\">import &#123; <span class=\"built_in\">readonly</span> &#125; from <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">readonly</span>  //设置name为只读</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deprecate会在控制台告诉用户name的api已经弃用</span></span><br><span class=\"line\">import &#123; deprecate &#125; from <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @deprecate(<span class=\"string\">'即将废弃'</span>,&#123;url:<span class=\"string\">'www.baidu.com'</span>&#125;) </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"代理模式\">代理模式<a href=\"2019/10/12/设计模式/设计模式#代理模式\"></a></h3><h4 id=\"介绍-4\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-4\"></a></h4><h4 id=\"示例-4\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-4\"></a></h4><ul>\n<li>科学上网</li>\n<li>明星经纪人</li>\n</ul>\n<h4 id=\"场景-4\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-4\"></a></h4><ul>\n<li>网页事件代理(事件委托)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.onclick = <span class=\"keyword\">function</span>(e)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\"># do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>Jquery $.proxy</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#div'</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    setTimeout($.proxy(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"comment\"># this符合预期</span></span><br><span class=\"line\">        console.log($(this))</span><br><span class=\"line\">    &#125;,this),1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>es6 Proxy</li>\n</ul>\n","prev":{"title":"JS - 面向对象","link":"2019/10/14/js-面向对象"},"plink":"yibaobeiya.github.io/2019/10/12/设计模式/设计模式/","toc":[{"title":"概述","id":"概述","index":"1"},{"title":"常用的设计模式","id":"常用的设计模式","index":"2","children":[{"title":"工厂方法模式","id":"工厂方法模式","index":"2.1","children":[{"title":"介绍","id":"介绍","index":"2.1.1"},{"title":"示例","id":"示例","index":"2.1.2"},{"title":"场景","id":"场景","index":"2.1.3"}]},{"title":"单例模式","id":"单例模式","index":"2.2","children":[{"title":"介绍","id":"介绍-1","index":"2.2.1"},{"title":"示例","id":"示例-1","index":"2.2.2"},{"title":"场景","id":"场景-1","index":"2.2.3"}]},{"title":"适配器模式","id":"适配器模式","index":"2.3","children":[{"title":"介绍","id":"介绍-2","index":"2.3.1"},{"title":"示例","id":"示例-2","index":"2.3.2"},{"title":"场景","id":"场景-2","index":"2.3.3"}]},{"title":"装饰器模式","id":"装饰器模式","index":"2.4","children":[{"title":"介绍","id":"介绍-3","index":"2.4.1"},{"title":"示例","id":"示例-3","index":"2.4.2"},{"title":"场景","id":"场景-3","index":"2.4.3"}]},{"title":"代理模式","id":"代理模式","index":"2.5","children":[{"title":"介绍","id":"介绍-4","index":"2.5.1"},{"title":"示例","id":"示例-4","index":"2.5.2"},{"title":"场景","id":"场景-4","index":"2.5.3"}]}]}]}