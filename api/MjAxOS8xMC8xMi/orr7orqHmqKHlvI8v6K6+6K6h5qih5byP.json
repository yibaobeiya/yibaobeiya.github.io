{"title":"JS 设计模式","date":"2019-10-12T02:57:12.535Z","link":"2019/10/12/设计模式/设计模式","tags":["JS","设计模式"],"categories":["JS 设计模式"],"updated":"2019-10-18T10:18:16.632Z","content":"<h2 id=\"概述\">概述<a href=\"2019/10/12/设计模式/设计模式#概述\"></a></h2><p><strong>js的设计模式总共有23种，总体来说设计模式分为三大类：</strong></p>\n<p>1、创建型模式 共五种：工厂方法模式、抽象工厂模式、建造者模式、单例模式、原型模式。<br>2、结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>3、行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h2 id=\"常用的设计模式\">常用的设计模式<a href=\"2019/10/12/设计模式/设计模式#常用的设计模式\"></a></h2><p><a href=\"2019/10/12/设计模式/设计模式#工厂方法模式\">工厂方法模式</a>、<a href=\"2019/10/12/设计模式/设计模式#单例模式\">单例模式</a>、<a href=\"2019/10/12/设计模式/设计模式#适配器模式\">适配器模式</a>、<a href=\"2019/10/12/设计模式/设计模式#装饰器模式\">装饰器模式</a>、<a href=\"2019/10/12/设计模式/设计模式#代理模式\">代理模式</a>、<a href=\"2019/10/12/设计模式/设计模式#观察者模式\">观察者模式</a>、<a href=\"2019/10/12/设计模式/设计模式#外观模式\">外观模式</a>、<a href=\"2019/10/12/设计模式/设计模式#迭代器模式\">迭代器模式</a>、<a href=\"2019/10/12/设计模式/设计模式#状态模式\">状态模式</a></p>\n<h3 id=\"工厂方法模式\">工厂方法模式<a href=\"2019/10/12/设计模式/设计模式#工厂方法模式\"></a></h3><h4 id=\"介绍\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍\"></a></h4><ul>\n<li>将 new 操作单独封装。</li>\n<li>遇到 new 时，就要考虑是否该使用工厂模式。</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例\">示例<a href=\"2019/10/12/设计模式/设计模式#示例\"></a></h4><ul>\n<li>你去购买汉堡，直接点餐、取餐，不会自己亲手做。</li>\n<li>商店要封装做汉堡的工作，做好直接给顾客。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Product &#123;</span><br><span class=\"line\">    constructor(name)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">init</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">buy</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># //工厂</span></span><br><span class=\"line\">class Store &#123;</span><br><span class=\"line\">    create(name)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Product(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Store();  </span><br><span class=\"line\">const product = store.create(<span class=\"string\">'干脆面'</span>)</span><br><span class=\"line\">product.buy()</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景\">场景<a href=\"2019/10/12/设计模式/设计模式#场景\"></a></h4><ul>\n<li>jQuery 实例<br><a href=\"/2019/10/14/js-面向对象#实例\">$(‘div’)</a></li>\n</ul>\n<ul>\n<li>React.createElement</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vnode(tag, attrs, children) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 省略内部代码...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">React.createElement = <span class=\"keyword\">function</span>(tag, attrs, children)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Vnode(tag, attrs, children)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">React.createElement(<span class=\"string\">'div'</span>,null,</span><br><span class=\"line\">    React.createElement(<span class=\"string\">'img'</span>,&#123;src:<span class=\"string\">'header.png'</span>&#125;)</span><br><span class=\"line\">    React.createElement(<span class=\"string\">'h3'</span>,null,<span class=\"string\">'h3标题就是我'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>vue 异步组件</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'component-name'</span>,<span class=\"keyword\">function</span>(resolve, reject)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">            template : <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"单例模式\">单例模式<a href=\"2019/10/12/设计模式/设计模式#单例模式\"></a></h3><h4 id=\"介绍-1\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-1\"></a></h4><ul>\n<li>系统中被唯一使用</li>\n<li>一个类只能初始化一个实例</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#S：单一职责原则-（体现较多）\">符合单一职责原则</a></li>\n</ul>\n<h4 id=\"示例-1\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-1\"></a></h4><ul>\n<li>登陆框</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoginForm &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span>()&#123;</span><br><span class=\"line\">        this.state = <span class=\"string\">'hide'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(this.state===<span class=\"string\">'show'</span>)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'登陆框已经显示'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.state = <span class=\"string\">'show'</span>;</span><br><span class=\"line\">        console.log(<span class=\"string\">'show Success'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">hide</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(this.state===<span class=\"string\">'hide'</span>)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'登陆框已经隐藏'</span>)</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.state = <span class=\"string\">'hide'</span>;</span><br><span class=\"line\">        console.log(<span class=\"string\">'hide Success'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">LoginForm.getInstance = (<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> instance;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> instance?instance:instance = new LoginForm()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> login1 = LoginForm.getInstance()</span><br><span class=\"line\"><span class=\"built_in\">let</span> login2 = LoginForm.getInstance()</span><br><span class=\"line\">login1.show()</span><br><span class=\"line\">login2.hide()</span><br><span class=\"line\">login2.hide()</span><br><span class=\"line\">console.log(login1===login2) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-1\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-1\"></a></h4><ul>\n<li>vuex和redux中的store</li>\n</ul>\n<h3 id=\"适配器模式\">适配器模式<a href=\"2019/10/12/设计模式/设计模式#适配器模式\"></a></h3><h4 id=\"介绍-2\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-2\"></a></h4><ul>\n<li>旧接口格式和使用者不兼容</li>\n<li>中间加一个适配转换接口</li>\n<li>将旧接口和使用者进行分离</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-2\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-2\"></a></h4><ul>\n<li>插头的适配<br>德国的插头在中国没办法使用，故需要将德国的插头转换（适配）为中国可使用的。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 德国的插头</span></span><br><span class=\"line\">class GermanyPlug &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPlug</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">'德国专用插头'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 中国的插头</span></span><br><span class=\"line\">class chinaPlug &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span> ()&#123;</span><br><span class=\"line\">        this.plug = new GermanyPlug()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPlug</span></span>()&#123;</span><br><span class=\"line\">        const info = this.plug.getPlug();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;info&#125;</span> - 转换为 - 中国专用插头`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const plug = new chinaPlug();</span><br><span class=\"line\">console.log(plug.getPlug())</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-2\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-2\"></a></h4><ul>\n<li>封装旧接口</li>\n<li>vue中的computed</li>\n</ul>\n<h3 id=\"装饰器模式\">装饰器模式<a href=\"2019/10/12/设计模式/设计模式#装饰器模式\"></a></h3><ol>\n<li>npm install babel-plugin-transform-decorators-legacy –save-dev</li>\n<li>.babel文件中添加，”plugins”: [“transform-decorators-legacy”]</li>\n</ol>\n<h4 id=\"介绍-3\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-3\"></a></h4><ul>\n<li>为对象添加新功能</li>\n<li>不改变其原有的结构和功能</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-3\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-3\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">draw</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'画一个圆形'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Decorator &#123;</span><br><span class=\"line\">    constructor(circle) &#123;</span><br><span class=\"line\">        this.circle = circle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">draw</span></span>() &#123;</span><br><span class=\"line\">        this.circle.draw();</span><br><span class=\"line\">        this.setBorderRed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setBorderRed</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'设置红色边框'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> circle = new Circle();</span><br><span class=\"line\">circle.draw()</span><br><span class=\"line\"><span class=\"built_in\">let</span> decorator = new Decorator(circle)</span><br><span class=\"line\">decorator.draw()</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-3\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-3\"></a></h4><ul>\n<li>装饰类</li>\n</ul>\n<p>1、简单的demo1</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> testDec(target)&#123;</span><br><span class=\"line\">    target.isDec = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testDec</span><br><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Demo.isDec) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>2、可传参demo2</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> testDec(isDec)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(target)&#123;</span><br><span class=\"line\">        target.isDec = isDec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testDec(<span class=\"literal\">true</span>)</span><br><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Demo.isDec) //<span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>3、mixin demo3</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mixins(...list)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span>(target)&#123;</span><br><span class=\"line\">        Objext.assign(target.prototype,...list)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Foo = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">foo</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'Foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\">class Demo &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Demo.foo() //<span class=\"string\">'foo'</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>装饰方法</li>\n</ul>\n<p>1、设置方法为只读</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">readonly</span>(target,name,descriptor)&#123;</span><br><span class=\"line\">    descriptor.writable = <span class=\"literal\">false</span>; //设置不可写</span><br><span class=\"line\">    <span class=\"built_in\">return</span> descriptor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">readonly</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br><span class=\"line\"><span class=\"comment\"># //该行会报错</span></span><br><span class=\"line\">person.name = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>2、打印日志</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">log</span>(target,name,descriptor)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> oldValue = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(`calling <span class=\"variable\">$&#123;name&#125;</span> width`,arguments);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> oldValue.apply(this,arguments)  //执行add方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Math &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">log</span></span><br><span class=\"line\">    add(a,b) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const math = new Math();</span><br><span class=\"line\">console.log(math.add(2,4)) //calling add width &#123;...arguments&#125;  6</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>引用第三方装饰器库<br>npm install core-decorators –save</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置name为只读</span></span><br><span class=\"line\">import &#123; <span class=\"built_in\">readonly</span> &#125; from <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @<span class=\"built_in\">readonly</span>  //设置name为只读</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deprecate会在控制台告诉用户name的api已经弃用</span></span><br><span class=\"line\">import &#123; deprecate &#125; from <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    @deprecate(<span class=\"string\">'即将废弃'</span>,&#123;url:<span class=\"string\">'www.baidu.com'</span>&#125;) </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'方法执行了'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">persoon.name();</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"代理模式\">代理模式<a href=\"2019/10/12/设计模式/设计模式#代理模式\"></a></h3><h4 id=\"介绍-4\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-4\"></a></h4><ul>\n<li>使用者无权访问目标对象</li>\n<li>中间加代理，通过代理做授权和控制</li>\n<li>代理类和目标分离，隔离开目标类和使用者</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"场景-4\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-4\"></a></h4><ul>\n<li>网页事件代理(事件委托)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.onclick = <span class=\"keyword\">function</span>(e)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\"># do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>Jquery $.proxy</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#div'</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    setTimeout($.proxy(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"comment\"># this符合预期</span></span><br><span class=\"line\">        console.log($(this))</span><br><span class=\"line\">    &#125;,this),1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>ES6 Proxy<br>某个品牌商想找某个明星代言，明星已将这些细节交给经纪人处理，所以需要品牌商和明星经纪人直接洽谈。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 明星</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> star = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'小丸子'</span>,</span><br><span class=\"line\">    age:<span class=\"string\">'18'</span>,</span><br><span class=\"line\">    phone:<span class=\"string\">'17777777777'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 经纪人</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> agent = new Proxy(star,&#123;</span><br><span class=\"line\">    get:<span class=\"keyword\">function</span> (target, key)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key ===  <span class=\"string\">'phone'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\"># 返回经纪人自己的手机号</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">'agent：18888888888'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key === <span class=\"string\">'price'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\"># 明星不报价，返回经纪人的报价</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">'12000'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> target[key]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">set</span>:<span class=\"keyword\">function</span> (target, key, val)&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 不满意价格向经纪人讲价</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key === <span class=\"string\">'customPrice'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val &lt; 10000)&#123;</span><br><span class=\"line\">                throw new Error(<span class=\"string\">'价格太低，拒绝讲价'</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\"># 讲价成功</span></span><br><span class=\"line\">                target[key] = val</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">console.log(agent.name)</span><br><span class=\"line\">console.log(agent.phone)</span><br><span class=\"line\">console.log(agent.price)</span><br><span class=\"line\">agent.customPrice = 100000 </span><br><span class=\"line\">console.log(agent.customPrice)</span><br><span class=\"line\">agent.customPrice = 1000  //价格太低，拒绝讲价</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"观察者模式\">观察者模式<a href=\"2019/10/12/设计模式/设计模式#观察者模式\"></a></h3><h4 id=\"介绍-5\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-5\"></a></h4><ul>\n<li>发布&amp;订阅</li>\n<li>一对多</li>\n<li>主题和观察者分离，不是主动触发而是被动监听，两者解耦</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-4\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-4\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主题，保存状态，状态变化之后触发所有观察者对象</span></span><br><span class=\"line\">class Subject &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span>()&#123;</span><br><span class=\"line\">        this.state = 0;</span><br><span class=\"line\">        this.observers = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getState</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(state)&#123;</span><br><span class=\"line\">        this.state = state;</span><br><span class=\"line\">        this.notifyAllObservers()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">notifyAllObservers</span></span>()&#123;</span><br><span class=\"line\">        this.observers.forEach(observer=&gt;&#123;</span><br><span class=\"line\">            observer.update();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    attach(observer)&#123;</span><br><span class=\"line\">        this.observers.push(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 观察者</span></span><br><span class=\"line\">class Observer &#123;</span><br><span class=\"line\">    constructor(name,subject)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.subject = subject; </span><br><span class=\"line\">        this.subject.attach(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">update</span></span>()&#123;</span><br><span class=\"line\">        console.log(`<span class=\"variable\">$&#123;this.name&#125;</span> update，state：<span class=\"variable\">$&#123;this.subject.state&#125;</span>`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">const subject = new Subject();</span><br><span class=\"line\">const observer1 = new Observer(<span class=\"string\">'observer1'</span>,subject);</span><br><span class=\"line\">const observer2 = new Observer(<span class=\"string\">'observer2'</span>,subject);</span><br><span class=\"line\">subject.setState(1)</span><br><span class=\"line\">subject.setState(2)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-5\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-5\"></a></h4><ul>\n<li>网页事件绑定<br>所有的事件监听都属于观察者模式</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=<span class=\"string\">\"btn1\"</span>&gt;&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">'#btn1'</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123; console.log(1) &#125;)</span><br><span class=\"line\">    $(<span class=\"string\">'#btn1'</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123; console.log(2) &#125;)</span><br><span class=\"line\">    $(<span class=\"string\">'#btn1'</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123; console.log(3) &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>Promise</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> loadImg(src)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Promise(<span class=\"keyword\">function</span>(resolve,reject)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> img = document.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            resolve(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.onerror= <span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">            reject(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = src</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadImg(<span class=\"string\">'https://www.gravatar.com/avatar/06818ca4361a28447cffdd2daaed2799?s=160'</span>).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(img)&#123;</span><br><span class=\"line\">    console.log(img.width)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> img</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(img)&#123;</span><br><span class=\"line\">    console.log(img.height)</span><br><span class=\"line\">&#125;).catch(<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    //统一捕获异常</span><br><span class=\"line\">    console.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>jQuery callbacks<br>  jquery底层代码演示</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var callbacks = $.Callbacks()</span><br><span class=\"line\">callbacks.add(<span class=\"keyword\">function</span>(info)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'fn1'</span>,info)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">callbacks.add(<span class=\"keyword\">function</span>(info)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'fn2'</span>,info)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">callbacks.fire(<span class=\"string\">'gogogo'</span>)</span><br><span class=\"line\">callbacks.fire(<span class=\"string\">'fire'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>nodejs</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义事件</span></span><br><span class=\"line\">const EventEmitter = require(<span class=\"string\">'events'</span>).EventEmitter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># demo1</span></span><br><span class=\"line\">const e = new EventEmitter();</span><br><span class=\"line\">e.on(<span class=\"string\">'some'</span>,(res)=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'1.监听some事件'</span>,res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">e.on(<span class=\"string\">'some'</span>,(res)=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'2.监听some事件'</span>,res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">e.emit(<span class=\"string\">'some'</span>,&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># demo2 任何构造函数都可以继承 EventEmitter 的 on emit 方法</span></span><br><span class=\"line\">class Dog extends EventEmitter &#123;&#125;</span><br><span class=\"line\">var simon = new Dog()</span><br><span class=\"line\">simon.on(<span class=\"string\">'bark'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'bark 事件被触发了'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">simon.emit(<span class=\"string\">'bark'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># demo3 stream流操作</span></span><br><span class=\"line\">var fs = require(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">var readStream = fs.createReadStream(<span class=\"string\">'1.txt'</span>) // 读取文件的stream</span><br><span class=\"line\">var length = 0;</span><br><span class=\"line\">readStream.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(chunk)&#123;</span><br><span class=\"line\">    length += chunk.toString().length;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'读取结束'</span>,length)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"其他场景\">其他场景<a href=\"2019/10/12/设计模式/设计模式#其他场景\"></a></h4><ul>\n<li>nodejs 中处理http请求；多进程通讯</li>\n<li>vue和react组件生命周期的触发</li>\n<li>vue watch</li>\n</ul>\n<h3 id=\"外观模式\">外观模式<a href=\"2019/10/12/设计模式/设计模式#外观模式\"></a></h3><h4 id=\"介绍-6\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-6\"></a></h4><ul>\n<li>为子系统中的一组接口提供了一个高层接口</li>\n<li>使用者使用这个高层接口</li>\n<li>不符合单一职责原则和开放封闭原则，因此谨慎使用不可滥用</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#I：接口独立原则\">符合接口独立原则</a></li>\n</ul>\n<h4 id=\"示例-5\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-5\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> bindEvent(elem,<span class=\"built_in\">type</span>,selector,fn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fn==null)&#123;</span><br><span class=\"line\">        fn = selector</span><br><span class=\"line\">        selector = null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># do something...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">bindEvent(elem,<span class=\"string\">'click'</span>,<span class=\"string\">'#div'</span>,fn)</span><br><span class=\"line\">bindEvent(elem,<span class=\"string\">'click'</span>,fn)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"迭代器模式\">迭代器模式<a href=\"2019/10/12/设计模式/设计模式#迭代器模式\"></a></h3><h4 id=\"介绍-7\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-7\"></a></h4><ul>\n<li>顺序访问一个集合</li>\n<li>使用者无需知道集合的内部结构（封装）</li>\n<li>迭代器对象和目标对象分离</li>\n<li>迭代器将使用者与目标对象隔离开</li>\n</ul>\n<h4 id=\"示例-6\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-6\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成器</span></span><br><span class=\"line\">class Iterator &#123;</span><br><span class=\"line\">    constructor(container) &#123;</span><br><span class=\"line\">        this.list = container.list;</span><br><span class=\"line\">        this.index = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">next</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(this.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> this.list[this.index++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">hasNext</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> !(this.index&gt;=this.list.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Container &#123;</span><br><span class=\"line\">    constructor(list)&#123;</span><br><span class=\"line\">        this.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 生成遍历器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getIterator</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Iterator(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">const arr = [1,2,3,4]</span><br><span class=\"line\">const container = new Container(arr);</span><br><span class=\"line\">const Iterator = container.getIterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(Iterator.hasNext())&#123;</span><br><span class=\"line\">    console.log(Iterator.next())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"场景-6\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-6\"></a></h4><ul>\n<li><p>jQuery each<br>array.each()，nodeList.each()，$(‘div’).each()</p>\n</li>\n<li><p>ES6 Iterator</p>\n</li>\n</ul>\n<ol>\n<li>为何存在?<br>ES6 语法中，有序集合的数据类型已经有很多，Array Map Set String RtpedArray arguments NodeList，需要有一个统一的遍历接口来遍历所有的数据类型（注意，object不是有序集合，可以使用map代替）</li>\n<li>Iterator 是什么?<br>以上数据类型，都有Symbol.iterator属性。属性值是函数，执行函数返回一个迭代器。这个迭代器就有next方法可顺序迭代子元素。可运行Array,prototype[Symbol.iterator]来测试</li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自己封装遍历器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> each(data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> iterator = data[Symbol.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">let</span> item = &#123;<span class=\"keyword\">done</span>:<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!item.done)&#123;</span><br><span class=\"line\">        item = iterator.next();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!item.done)&#123;</span><br><span class=\"line\">            console.log(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># ES6提供遍历器 for of</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> each(data)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> item of data)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">each(nodeList)</span><br><span class=\"line\">each(arr)</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>Generator 函数</li>\n</ul>\n<h3 id=\"状态模式\">状态模式<a href=\"2019/10/12/设计模式/设计模式#状态模式\"></a></h3><h4 id=\"介绍-8\">介绍<a href=\"2019/10/12/设计模式/设计模式#介绍-8\"></a></h4><ul>\n<li>一个对象有状态变化</li>\n<li>每次状态变化都会触发一个逻辑</li>\n<li>不能总是用 if…else来控制</li>\n<li>将状态对象和主体对象分离，状态的变化逻辑单独处理</li>\n<li><a href=\"/2019/10/15/设计模式/设计原则#O：开放封闭原则-（体现较多）\">符合开放封闭原则</a></li>\n</ul>\n<h4 id=\"示例-7\">示例<a href=\"2019/10/12/设计模式/设计模式#示例-7\"></a></h4><ul>\n<li>交通信号灯的变化<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 状态</span></span><br><span class=\"line\">class State &#123;</span><br><span class=\"line\">    constructor(color)&#123;</span><br><span class=\"line\">        this.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handle(context)&#123;</span><br><span class=\"line\">        context.setState(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 主体</span></span><br><span class=\"line\">class Context &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span></span>()&#123;</span><br><span class=\"line\">        this.state = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getState</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(state)&#123;</span><br><span class=\"line\">        this.state = state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const context = new Context();</span><br><span class=\"line\">const green = new State(<span class=\"string\">'green'</span>)</span><br><span class=\"line\">const yellow = new State(<span class=\"string\">'yellow'</span>)</span><br><span class=\"line\">const black = new State(<span class=\"string\">'black'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">green.handle(context);</span><br><span class=\"line\">console.log(context.getState())</span><br><span class=\"line\">yellow.handle(context);</span><br><span class=\"line\">console.log(context.getState())</span><br><span class=\"line\">black.handle(context);</span><br><span class=\"line\">console.log(context.getState())</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h4 id=\"场景-7\">场景<a href=\"2019/10/12/设计模式/设计模式#场景-7\"></a></h4><ul>\n<li>有限状态机<br>  有限个状态，以及在这些状态之间的变化，如交通信号灯，使用开源lib:javascript-state-machine，(收藏和取消收藏)</li>\n</ul>\n<ul>\n<li>写一个简单的Promise<br>  Promise就是一个有限状态机<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 利用第三方lib手写一个简单的Promise</span><br><span class=\"line\">// 1.创建状态机模型</span><br><span class=\"line\">import StateMachine from <span class=\"string\">'javascript-state-machine'</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> fsm = new StateMachine(&#123;</span><br><span class=\"line\">    init:<span class=\"string\">'pending'</span>,</span><br><span class=\"line\">    transitions: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name:<span class=\"string\">'resolve'</span>,</span><br><span class=\"line\">            form:<span class=\"string\">'pending'</span>,</span><br><span class=\"line\">            to:<span class=\"string\">'fullfilled'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name:<span class=\"string\">'reject'</span>,</span><br><span class=\"line\">            form:<span class=\"string\">'pending'</span>,</span><br><span class=\"line\">            to:<span class=\"string\">'rejected'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        // state 当前状态机的实例</span><br><span class=\"line\">        // data 执行resolve传的参数</span><br><span class=\"line\">        onResolve(state, data)&#123;</span><br><span class=\"line\">            data.successList.forEach( fn =&gt; fn())</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onReject(state,  data)&#123;</span><br><span class=\"line\">            data.failList.forEach( fn =&gt; fn())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 2.定义promise类</span><br><span class=\"line\">class MyPromise &#123;</span><br><span class=\"line\">    constructor(fn)&#123;</span><br><span class=\"line\">        this.successList = []</span><br><span class=\"line\">        this.failList = []</span><br><span class=\"line\">        fn(()=&gt;&#123;</span><br><span class=\"line\">            // resolve函数</span><br><span class=\"line\">            fsm.resolve(this)</span><br><span class=\"line\">        &#125;,()=&gt;&#123;</span><br><span class=\"line\">            // reject函数</span><br><span class=\"line\">            fsm.reject(this)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">then</span>(successFn, failFn)&#123;</span><br><span class=\"line\">       this.successList.push(successFn)</span><br><span class=\"line\">       this.failList.push(failFn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟调用</span></span><br><span class=\"line\">new MyPromise().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;,()=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h2 id=\"不常用的设计模式\">不常用的设计模式<a href=\"2019/10/12/设计模式/设计模式#不常用的设计模式\"></a></h2><h2 id=\"总结\">总结<a href=\"2019/10/12/设计模式/设计模式#总结\"></a></h2><h3 id=\"代理模式和适配器模式的区别\">代理模式和适配器模式的区别<a href=\"2019/10/12/设计模式/设计模式#代理模式和适配器模式的区别\"></a></h3><ul>\n<li>适配器模式<br>  提供一个不同的接口（如不同版本的插头）</li>\n<li>代理模式<br>  提供一模一样的接口</li>\n</ul>\n<h3 id=\"代理模式和装饰器模式的区别\">代理模式和装饰器模式的区别<a href=\"2019/10/12/设计模式/设计模式#代理模式和装饰器模式的区别\"></a></h3><ul>\n<li>装饰器模式<br>  扩展功能，原有功能不变且可直接使用</li>\n<li>代理模式<br>  显示原有功能，但是经过限制或者阉割之后的</li>\n</ul>\n","prev":{"title":"JS - 面向对象","link":"2019/10/14/js-面向对象"},"plink":"yibaobeiya.github.io/2019/10/12/设计模式/设计模式/","toc":[{"title":"概述","id":"概述","index":"1"},{"title":"常用的设计模式","id":"常用的设计模式","index":"2","children":[{"title":"工厂方法模式","id":"工厂方法模式","index":"2.1","children":[{"title":"介绍","id":"介绍","index":"2.1.1"},{"title":"示例","id":"示例","index":"2.1.2"},{"title":"场景","id":"场景","index":"2.1.3"}]},{"title":"单例模式","id":"单例模式","index":"2.2","children":[{"title":"介绍","id":"介绍-1","index":"2.2.1"},{"title":"示例","id":"示例-1","index":"2.2.2"},{"title":"场景","id":"场景-1","index":"2.2.3"}]},{"title":"适配器模式","id":"适配器模式","index":"2.3","children":[{"title":"介绍","id":"介绍-2","index":"2.3.1"},{"title":"示例","id":"示例-2","index":"2.3.2"},{"title":"场景","id":"场景-2","index":"2.3.3"}]},{"title":"装饰器模式","id":"装饰器模式","index":"2.4","children":[{"title":"介绍","id":"介绍-3","index":"2.4.1"},{"title":"示例","id":"示例-3","index":"2.4.2"},{"title":"场景","id":"场景-3","index":"2.4.3"}]},{"title":"代理模式","id":"代理模式","index":"2.5","children":[{"title":"介绍","id":"介绍-4","index":"2.5.1"},{"title":"场景","id":"场景-4","index":"2.5.2"}]},{"title":"观察者模式","id":"观察者模式","index":"2.6","children":[{"title":"介绍","id":"介绍-5","index":"2.6.1"},{"title":"示例","id":"示例-4","index":"2.6.2"},{"title":"场景","id":"场景-5","index":"2.6.3"},{"title":"其他场景","id":"其他场景","index":"2.6.4"}]},{"title":"外观模式","id":"外观模式","index":"2.7","children":[{"title":"介绍","id":"介绍-6","index":"2.7.1"},{"title":"示例","id":"示例-5","index":"2.7.2"}]},{"title":"迭代器模式","id":"迭代器模式","index":"2.8","children":[{"title":"介绍","id":"介绍-7","index":"2.8.1"},{"title":"示例","id":"示例-6","index":"2.8.2"},{"title":"场景","id":"场景-6","index":"2.8.3"}]},{"title":"状态模式","id":"状态模式","index":"2.9","children":[{"title":"介绍","id":"介绍-8","index":"2.9.1"},{"title":"示例","id":"示例-7","index":"2.9.2"},{"title":"场景","id":"场景-7","index":"2.9.3"}]}]},{"title":"不常用的设计模式","id":"不常用的设计模式","index":"3"},{"title":"总结","id":"总结","index":"4","children":[{"title":"代理模式和适配器模式的区别","id":"代理模式和适配器模式的区别","index":"4.1"},{"title":"代理模式和装饰器模式的区别","id":"代理模式和装饰器模式的区别","index":"4.2"}]}]}